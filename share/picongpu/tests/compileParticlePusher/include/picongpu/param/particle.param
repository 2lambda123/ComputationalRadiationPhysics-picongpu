/* Copyright 2013-2022 Axel Huebl, Rene Widera, Benjamin Worpitz,
 *                     Richard Pausch
 *
 * This file is part of PIConGPU.
 *
 * PIConGPU is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * PIConGPU is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with PIConGPU.
 * If not, see <http://www.gnu.org/licenses/>.
 */

#pragma once

#include "picongpu/particles/filter/filter.def"
#include "picongpu/particles/manipulators/manipulators.def"
#include "picongpu/particles/startPosition/functors.def"

#include <pmacc/math/operation.hpp>

namespace picongpu
{
    namespace particles
    {
        namespace startPosition
        {
            struct RandomParam25ppc
            {
                /** Count of particles per cell at initial state
                 *  unit: none
                 */
                static constexpr uint32_t numParticlesPerCell = 25;
            };
            using RandomPositionAndWeighting25ppc = RandomPositionAndWeightingImpl<RandomParam25ppc>;

        } // namespace startPosition

        /** a particle with a weighting below MIN_WEIGHTING will not
         *      be created / will be deleted
         *  unit: none
         */
        constexpr float_X MIN_WEIGHTING = 10.0;

        /** During unit normalization, we assume this is a typical
         *  number of particles per cell for normalization of weighted
         *  particle attributes.
         */
        constexpr uint32_t TYPICAL_PARTICLES_PER_CELL = startPosition::RandomParam25ppc::numParticlesPerCell;

        namespace manipulators
        {
            CONST_VECTOR(float_X, 3, DriftParamPositive_direction, 1.0, 0.0, 0.0);
            struct DriftParamPositive
            {
                /** Initial particle drift velocity for electrons and ions
                 *  Examples:
                 *    - No drift is equal to 1.0
                 *  unit: none
                 */
                static constexpr float_64 gamma = 1.021;
                const DriftParamPositive_direction_t direction;
            };
            using AssignXDriftPositive = unary::Drift<DriftParamPositive, pmacc::math::operation::Assign>;

            //! Functor for a temperature assignment, follows requirements of param::TemperatureFunctor
            struct TemperatureFunctor
            {
                /** Return the temperature in keV for the given position
                 *
                 * Return type may be float_X or float_64.
                 *
                 * @param totalCellOffset total offset including all slides [in cells]
                 */
                HDINLINE float_X operator()(const DataSpace<simDim>& totalCellOffset)
                {
                    return 0.0005_X;
                }
            };
            using AddFreeTemperature = unary::FreeTemperature<TemperatureFunctor>;

        } // namespace manipulators
    } // namespace particles
} // namespace picongpu
