/* Copyright 2020-2022 Sergei Bastrakov
 *
 * This file is part of PIConGPU.
 *
 * PIConGPU is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * PIConGPU is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with PIConGPU.
 * If not, see <http://www.gnu.org/licenses/>.
 */

/** @file incidentField.param
 *
 * Configure incident field profile and gap between Huygence surface and absorber for each boundary.
 *
 * Available profiles:
 *  - profiles::None         : no incident field
 *  - profiles::Free<>       : custom profile with user-provided functors to calculate incident E and B
 *  - profiles::PlaneWave<>  : plane wave profile with given parameters
 *  - profiles::Polynom<>    : wavepacket with a polynomial temporal intensity shape profile with given parameters
 *  - profiles::Wavepacket<> : wavepacket with Gaussian spatial and temporal envelope profile with given parameters
 *
 * In the end, this file needs to define `XMin`, `XMax`, `YMax`, `YMax`, `ZMin`, `ZMax` (the latter two can be skipped
 * in 2d) type aliases in namespace `picongpu::fields::incidentField`. It also has to define constexpr array
 * `OFFSET` that controls inward offset of the generating surface relative to global domain. For example:
 *
 * @code{.cpp}
 * using XMin = profiles::Free< UserFunctorIncidentE >;
 * using XMax = profiles::None;
 * using YMin = profiles::PlaneWave< UserPlaneWaveParams >;
 * using YMax = profiles::Free< AnotherUserFunctorIncidentE, AnotherUserFunctorIncidentB >;
 * using ZMin = profiles::Polynom< UserPolynomParams >;
 * using ZMax = profiles::None;
 *
 * constexpr uint32_t OFFSET[3][2] = { {16, 16}, {16, 16}, {16, 16} };
 * @endcode
 */

#pragma once

#include "picongpu/fields/incidentField/profiles/profiles.def"


namespace picongpu
{
    namespace fields
    {
        namespace incidentField
        {
            /** Base class with laser parameters and common functionality
             *
             * It is not required to have a base class, but in this case convenient to keep all laser-related things
             * together.
             */
            class FunctorBase
            {
            public:
                // Constants for pulse generation
                static constexpr float_64 TIME_PERIOD_SI = 0.0211e-9; // 0.0211 ns
                static constexpr float_64 WAVE_LENGTH_SI = TIME_PERIOD_SI * SI::SPEED_OF_LIGHT_SI;
                static constexpr float_64 UNITCONV_A0_to_Amplitude_SI = -1.0 / WAVE_LENGTH_SI * SI::ELECTRON_MASS_SI
                    * SI::SPEED_OF_LIGHT_SI * SI::SPEED_OF_LIGHT_SI / SI::ELECTRON_CHARGE_SI;
                static constexpr float_64 A0 = 8.0;
                static constexpr float_64 AMPLITUDE_SI = A0 * UNITCONV_A0_to_Amplitude_SI;
                static constexpr float_64 DURATION_SI = 0.026e-9; // 0.026 ns

                // These need to be changed together with grid size
                static constexpr float_64 LASER_CENTER_X_SI = 80.0e-3; // 80 mm
                static constexpr float_64 LASER_WIDTH_X_SI = 8.0e-3; // 8 mm
                static constexpr float_64 LASER_CENTER_Y_SI = 40.0e-3; // 40 mm
                static constexpr float_64 LASER_WIDTH_Y_SI = 8.0e-3; // 8 mm
                static constexpr float_64 LASER_CENTER_Z_SI = 64.0e-3; // 64 mm
                static constexpr float_64 LASER_WIDTH_Z_SI = 10.0e-3; // 10 mm

                // Convert to grid units
                static constexpr uint32_t DURATION_STEPS = DURATION_SI / SI::DELTA_T_SI;
                static constexpr uint32_t LASER_CENTER_X_CELLS = LASER_CENTER_X_SI / SI::CELL_WIDTH_SI;
                static constexpr uint32_t LASER_WIDTH_X_CELLS = LASER_WIDTH_X_SI / SI::CELL_WIDTH_SI;
                static constexpr uint32_t LASER_CENTER_Y_CELLS = LASER_CENTER_Y_SI / SI::CELL_HEIGHT_SI;
                static constexpr uint32_t LASER_WIDTH_Y_CELLS = LASER_WIDTH_Y_SI / SI::CELL_HEIGHT_SI;
                static constexpr uint32_t LASER_CENTER_Z_CELLS = LASER_CENTER_Z_SI / SI::CELL_DEPTH_SI;
                static constexpr uint32_t LASER_WIDTH_Z_CELLS = LASER_WIDTH_Z_SI / SI::CELL_DEPTH_SI;

                // Delay at initialization to ensure a smooth start
                static constexpr float_64 initializationDurationSI = 16.0 * DURATION_SI;

                /** Create base functor on the host side for the given time step
                 *
                 * We will precalculate and save time-dependent values in members to avoid recalculating same values
                 *
                 * @param currentStep current time step index, note that it is fractional
                 */
                HINLINE FunctorBase(float_X const currentStep)
                {
                    auto const normalizedDuration
                        = (currentStep * SI::DELTA_T_SI - 0.5 * initializationDurationSI) / DURATION_SI;
                    timeEnvelope = static_cast<float_X>(math::exp(-normalizedDuration * normalizedDuration));
                    currentTime = currentStep * SI::DELTA_T_SI;
                }

                /** Get value to calculate Ey / Bz for the XMin source
                 *
                 * @param totalCellIdx cell index in the total domain (including all moving window slides),
                 *        note that it is fractional
                 */
                HDINLINE float_X getXMinSourceValueSI(floatD_X const& totalCellIdx) const
                {
                    auto const k = 2.0_X * M_PI / WAVE_LENGTH_SI;
                    auto const x = totalCellIdx.x() * SI::CELL_WIDTH_SI;
                    auto const longitudinal = timeEnvelope * sin(k * (x - SI::SPEED_OF_LIGHT_SI * currentTime));
                    auto const normalizedY = (totalCellIdx.y() - LASER_CENTER_Y_CELLS) / LASER_WIDTH_Y_CELLS;
                    auto normalizedZ = 0.0;
                    if constexpr(simDim == 3)
                        normalizedZ = (totalCellIdx.z() - LASER_CENTER_Z_CELLS) / LASER_WIDTH_Z_CELLS;
                    auto const transversal = math::exp(-(normalizedY * normalizedY + normalizedZ * normalizedZ));
                    return AMPLITUDE_SI * longitudinal * transversal;
                }

                /** Get value to calculate Ex / Bz for the XMax source
                 *
                 * @param totalCellIdx cell index in the total domain (including all moving window slides),
                 *        note that it is fractional
                 */
                HDINLINE float_X getYMaxSourceValueSI(floatD_X const& totalCellIdx) const
                {
                    auto const k = 2.0_X * M_PI / WAVE_LENGTH_SI;
                    auto const y = totalCellIdx.y() * SI::CELL_HEIGHT_SI;
                    auto const longitudinal = timeEnvelope * sin(k * (y + SI::SPEED_OF_LIGHT_SI * currentTime));
                    auto const normalizedX = (totalCellIdx.x() - LASER_CENTER_Y_CELLS) / LASER_WIDTH_X_CELLS;
                    auto normalizedZ = 0.0;
                    if constexpr(simDim == 3)
                        normalizedZ = (totalCellIdx.z() - LASER_CENTER_Z_CELLS) / LASER_WIDTH_Z_CELLS;
                    auto const transversal = math::exp(-(normalizedX * normalizedX + normalizedZ * normalizedZ));
                    return AMPLITUDE_SI * longitudinal * transversal;
                }

            private:
                //! Precalculated time-dependent envelope
                float_X timeEnvelope;

                //! Current time
                float_X currentTime;
            };

            /** Functor to set values of incident E field
             */
            class FunctorXMinIncidentE : public FunctorBase
            {
            public:
                /* We use this to calculate your SI input back to our unit system */
                PMACC_ALIGN(m_unitField, const float3_64);

                /** Create a functor on the host side for the given time step
                 *
                 * @param currentStep current time step index, note that it is fractional
                 * @param unitField conversion factor from SI to internal units,
                 *                  field_internal = field_SI / unitField
                 */
                HINLINE FunctorXMinIncidentE(float_X const currentStep, float3_64 const unitField)
                    : FunctorBase(currentStep)
                    , m_unitField(unitField)
                {
                }

                /** Calculate incident field E_inc(r, t) for a source
                 *
                 * @param totalCellIdx cell index in the total domain (including all moving window slides),
                 *        note that it is fractional
                 */
                HDINLINE float3_X operator()(floatD_X const& totalCellIdx) const
                {
                    auto const valueSI = getXMinSourceValueSI(totalCellIdx);
                    auto const fieldSI = float3_X(0.0_X, valueSI, 0.0_X);
                    return fieldSI / precisionCast<float_X>(m_unitField);
                }
            };

            /** Functor to set values of incident E field
             */
            class FunctorYMaxIncidentE : public FunctorBase
            {
            public:
                /* We use this to calculate your SI input back to our unit system */
                PMACC_ALIGN(m_unitField, const float3_64);

                /** Create a functor on the host side for the given time step
                 *
                 * @param currentStep current time step index, note that it is fractional
                 * @param unitField conversion factor from SI to internal units,
                 *                  field_internal = field_SI / unitField
                 */
                HINLINE FunctorYMaxIncidentE(float_X const currentStep, float3_64 const unitField)
                    : FunctorBase(currentStep)
                    , m_unitField(unitField)
                {
                }

                /** Calculate incident field E_inc(r, t) for a source
                 *
                 * @param totalCellIdx cell index in the total domain (including all moving window slides),
                 *        note that it is fractional
                 */
                HDINLINE float3_X operator()(floatD_X const& totalCellIdx) const
                {
                    auto const valueSI = getYMaxSourceValueSI(totalCellIdx);
                    auto const fieldSI = float3_X(valueSI, 0.0_X, 0.0_X);
                    return fieldSI / precisionCast<float_X>(m_unitField);
                }
            };

            /** Functor to set values of incident B field
             */
            class FunctorYMaxIncidentB : public FunctorBase
            {
            public:
                /* We use this to calculate your SI input back to our unit system */
                PMACC_ALIGN(m_unitField, const float3_64);

                /** Create a functor on the host side for the given time step
                 *
                 * @param currentStep current time step index, note that it is fractional
                 * @param unitField conversion factor from SI to internal units,
                 *                  field_internal = field_SI / unitField
                 */
                HINLINE FunctorYMaxIncidentB(float_X const currentStep, float3_64 const unitField)
                    : FunctorBase(currentStep)
                    , m_unitField(unitField)
                {
                }

                /** Calculate incident field B_inc(r, t) for a source
                 *
                 * @param totalCellIdx cell index in the total domain (including all moving window slides),
                 *        note that it is fractional
                 */
                HDINLINE float3_X operator()(floatD_X const& totalCellIdx) const
                {
                    auto const valueSI = getYMaxSourceValueSI(totalCellIdx);
                    auto const fieldSI = float3_X(0.0_X, 0.0_X, valueSI) / SI::SPEED_OF_LIGHT_SI;
                    return fieldSI / precisionCast<float_X>(m_unitField);
                }
            };

            /** Source of incident E and B fields
             *
             * We use default type for functor B that will calculate it from E values using SVEA according to the
             * boundary the profile is applied to.
             */
            using MyXMinProfile = profiles::Free<FunctorXMinIncidentE>;

            /** Another source of incident E and B fields, this time we provide both E and B functors
             *
             * In this case it is no different since our pulse is plane wave and FunctorYMaxIncidentB results in the
             * same as what default SVEA would give.
             * However, in principle a user could implement any behavior in FunctorYMaxIncidentB.
             */
            using MyYMaxProfile = profiles::Free<FunctorYMaxIncidentE, FunctorYMaxIncidentB>;

            /**@{*/
            /** Incident field profile types along each boundary, these 6 types (or aliases) are required.
             *
             * Here we generate Gaussian pulses propagating inwards from X min and Y Max borders.
             */
            using XMin = MyXMinProfile;
            using XMax = profiles::None;
            using YMin = profiles::None;
            using YMax = MyYMaxProfile;
            using ZMin = profiles::None;
            using ZMax = profiles::None;
            /**@}*/

            /** Inward offset of the Huygens surface from global domain boundaries
             *
             * The offset is in cells, counted from the corrresponding boundary inwards in the normal direction.
             * This array is logically similar to specifying absorber thickness.
             * The offset for the boundary must be at least absorber_thickness + (FDTD_spatial_order / 2 - 1).
             * However beware of setting offset = absorber_thickness + const, as then changing absorber parameters
             * may also affect laser positioning.
             * When all used profiles are None, the check for OFFSET validity is skipped.
             */
            constexpr uint32_t OFFSET[3][2] = {
                {16, 16}, // x direction [negative, positive]
                {16, 16}, // y direction [negative, positive]
                {16, 16} // z direction [negative, positive]
            };

        } // namespace incidentField
    } // namespace fields
} // namespace picongpu
