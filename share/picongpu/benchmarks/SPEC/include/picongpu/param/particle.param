/* Copyright 2013-2022 Axel Huebl, Rene Widera, Benjamin Worpitz,
 *                     Richard Pausch, Klaus Steiniger
 *
 * This file is part of PIConGPU.
 *
 * PIConGPU is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * PIConGPU is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with PIConGPU.
 * If not, see <http://www.gnu.org/licenses/>.
 */

/** @file
 *
 * Configurations for particle manipulators. Set up and declare functors that
 * can be used in speciesInitialization.param for particle species
 * initialization and manipulation, such as temperature distributions, drifts,
 * pre-ionization and in-cell position.
 */

#pragma once

#include "picongpu/particles/manipulators/manipulators.def"
#include "picongpu/particles/startPosition/functors.def"

#include <pmacc/math/operation.hpp>


namespace picongpu
{
    namespace particles
    {
        /** a particle with a weighting below MIN_WEIGHTING will not
         *      be created / will be deleted
         *
         *  unit: none */
        constexpr float_X MIN_WEIGHTING = 1.0;

        namespace manipulators
        {
            /** Define initial electron drift direction vector.
             *  This vector is used in struct DriftParamElectrons.
             */
            CONST_VECTOR(float_X, 3, DriftParamElectrons_direction, 0.0, 0.0, 1.0);

            /** Define Lorentz factor of initial electron drift. */
            struct DriftParamElectrons
            {
                static constexpr float_64 gamma = 5.0;
                const DriftParamElectrons_direction_t direction;
            };
            /** Definition of manipulator that assigns a drift in Z
             *  using parameters from struct DriftParamElectrons.
             */
            using AssignZDriftElectrons = unary::Drift<DriftParamElectrons, pmacc::math::operation::Assign>;


            /** Define initial positron drift direction vector.
             *  This vector is used in struct DriftParamPositrons.
             */
            CONST_VECTOR(float_X, 3, DriftParamPositrons_direction, 0.0, 0.0, -1.0);

            /** Define Lorentz factor of initial particle drift. */
            struct DriftParamPositrons
            {
                static constexpr float_64 gamma = 5.0;
                const DriftParamPositrons_direction_t direction;
            };
            /** Definition of manipulator that assigns a drift in Z
             *  using parameters from struct DriftParamPositrons.
             */
            using AssignZDriftPositrons = unary::Drift<DriftParamPositrons, pmacc::math::operation::Assign>;

        } // namespace manipulators

        namespace startPosition
        {
            /** Define target number for electron marco-particles per cell along a direction.
             * To be used in QuietElectrons start position functor.
             *
             * Here, one macro-particle per cell along x, four macro-particles per cell along z, and
             * two macro-particles per cell along y.
             *
             * Vector is automatically reduced to two dimensions for 2D (x,y) simulations.
             */
            struct QuietParamElectrons
            {
                /** Count of macro-particles per cell per direction at initial state
                 *
                 *  unit: none */
                using numParticlesPerDimension = mCT::shrinkTo<mCT::Int<1, 2, 4>, simDim>::type;
            };
            /** Definition of QuietElectrons start position functor that positions macro-particles regularly on the
             * grid. No random number generator used.
             */
            using QuietElectrons = QuietImpl<QuietParamElectrons>;


            /** Define target number for positron marco-particles per cell along a direction.
             * To be used in QuietPositrons start position functor.
             *
             * Here, four macro-particles per cell along x, two macro-particles per cell along z, and
             * one macro-particle per cell along y.
             *
             * Vector is automatically reduced to two dimensions for 2D (x,y) simulations.
             */
            struct QuietParamPositrons
            {
                /** Count of macro-particles per cell per direction at initial state
                 *
                 *  unit: none */
                using numParticlesPerDimension = mCT::shrinkTo<mCT::Int<4, 1, 2>, simDim>::type;
            };
            /** Definition of QuietPositrons start position functor that positions macro-particles regularly on the
             * grid. No random number generator used.
             */
            using QuietPositrons = QuietImpl<QuietParamPositrons>;

        } // namespace startPosition

        /** Approximate number of maximum macro-particles per cell.
         *
         * Used internally for unit normalization.
         */
        constexpr uint32_t TYPICAL_PARTICLES_PER_CELL
            = mCT::volume<startPosition::QuietParamElectrons::numParticlesPerDimension>::type::value;
    } // namespace particles
} // namespace picongpu
