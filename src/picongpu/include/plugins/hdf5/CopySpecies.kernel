/**
 * Copyright 2013 Ren√© Widera
 *
 * This file is part of PIConGPU. 
 * 
 * PIConGPU is free software: you can redistribute it and/or modify 
 * it under the terms of the GNU General Public License as published by 
 * the Free Software Foundation, either version 3 of the License, or 
 * (at your option) any later version. 
 * 
 * PIConGPU is distributed in the hope that it will be useful, 
 * but WITHOUT ANY WARRANTY; without even the implied warranty of 
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the 
 * GNU General Public License for more details. 
 * 
 * You should have received a copy of the GNU General Public License 
 * along with PIConGPU.  
 * If not, see <http://www.gnu.org/licenses/>. 
 */



#pragma once


#include "types.h"
#include "simulation_types.hpp"
#include "dimensions/DataSpaceOperations.hpp"


namespace picongpu
{

namespace hdf5
{
using namespace PMacc;


namespace bmpl = boost::mpl;

template<class T_DestFrame, class T_SrcBox, class Filter, class Space ,class Mapping>
__global__ void copySpecies(int* counter, T_DestFrame destFrame, T_SrcBox srcBox, Filter filter,Space gpuOffset, Mapping mapper)
{
    using namespace particles::operations;

    typedef T_DestFrame DestFrameType;
    typedef typename T_SrcBox::FrameType SrcFrameType;
    typedef typename Mapping::SuperCellSize Block;

    __shared__ SrcFrameType *srcFramePtr;
    __shared__ int localCounter;
    __shared__ int globalOffset;

    int storageOffset;

    __shared__ bool isValid;

    __syncthreads(); /*wait that all shared memory is initialised*/

    const DataSpace<Mapping::Dim> block = mapper.getSuperCellIndex(DataSpace<simDim > (blockIdx));
    const DataSpace<Mapping::Dim> superCellPosition((block - mapper.getGuardingSuperCells()) * mapper.getSuperCellSize());
    filter.setSuperCellPosition(superCellPosition);
    if (threadIdx.x == 0)
    {
        localCounter = 0;
        srcFramePtr = &(srcBox.getFirstFrame(block, isValid));
    }
    __syncthreads();
    while (isValid) //move over all Frames
    {
        PMACC_AUTO(parSrc, ((*srcFramePtr)[threadIdx.x]));
        storageOffset = -1;
        if (parSrc[multiMask_]==1 &&  filter(*srcFramePtr, threadIdx.x))
            storageOffset = atomicAdd(&localCounter, 1);
        __syncthreads();
        if (threadIdx.x == 0)
        {
            globalOffset = atomicAdd(counter, localCounter);
        }
        __syncthreads();
        if (storageOffset != -1)
        {
            PMACC_AUTO(parDest, destFrame[globalOffset + storageOffset]);
            PMACC_AUTO(parDestNoGlobalIdx, deselect<globalCellIdx<> >(parDest));
            assign(parDestNoGlobalIdx, parSrc);
            DataSpace<Mapping::Dim> localCell(DataSpaceOperations<Mapping::Dim>::template map<Block>(parSrc[localCellIdx_]));
            parDest[globalCellIdx_]=gpuOffset+superCellPosition+localCell;
        }
        __syncthreads();
        if (threadIdx.x == 0)
        {
            srcFramePtr = &(srcBox.getNextFrame(*srcFramePtr, isValid));
            localCounter = 0;
        }
        __syncthreads();
    }
}


} //namspace hdf5

} //namepsace picongpu

