/* Copyright 2015-2017 Rene Widera, Axel Huebl
 *
 * This file is part of PIConGPU.
 *
 * PIConGPU is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * PIConGPU is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with PIConGPU.
 * If not, see <http://www.gnu.org/licenses/>.
 */

#pragma once

#include "particles/manipulators/generic/Free.def"
#include "particles/operations/Assign.hpp"


namespace picongpu
{
namespace particles
{
namespace manipulators
{
namespace binary
{
namespace detail
{
    /** assign attributes of one particle to another
     *
     * Can be used as binary and higher order operator but only the first two
     * particles are used for the assign operation.
     *
     * Assign all attributes of an source particle to a destination
     * particle.
     */
    struct Assign
    {
        /** execute assign operator
         *
         * @tparam T_DestParticle PMacc::Particle, type of the destination particle
         * @tparam T_SrcParticle PMacc::Particle, type of the source particle
         * @tparam T_Args PMacc::Particle, arbitrary number of particles types
         *
         * @param particleDest destination particle
         * @param particleSrc source particle
         * @param ... unused particles
         */
        template<
            typename T_DestParticle,
            typename T_SrcParticle,
            typename ... T_Args
        >
        DINLINE void
        operator( )(
            T_DestParticle & particleDest,
            T_SrcParticle & particleSrc,
            T_Args && ...
        )
        {
            PMacc::particles::operations::assign(
                    particleDest,
                    particleSrc
            );
        }
    };
} // namespace detail

    /** assign attributes of one particle to another
     *
     * detail::Assign
     */
    using Assign = generic::Free<
        detail::Assign
    >;

} // namespace binary
} // namespace manipulators
} // namespace particles
} // namespace picongpu
