/**
 * Copyright 2016 Alexander Grund
 *
 * This file is part of libPMacc.
 *
 * libPMacc is free software: you can redistribute it and/or modify
 * it under the terms of either the GNU General Public License or
 * the GNU Lesser General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * libPMacc is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License and the GNU Lesser General Public License
 * for more details.
 *
 * You should have received a copy of the GNU General Public License
 * and the GNU Lesser General Public License along with libPMacc.
 * If not, see <http://www.gnu.org/licenses/>.
 */

#pragma once

#include "pmacc_types.hpp"
#include <boost/tuple/tuple.hpp>

namespace PMacc {

    /**
     * Provider for globally unique ids (even across ranks)
     * Implemented for use in static contexts
     */
    template<unsigned T_dim>
    class IdProvider
    {
    public:
        /** Initializes the state so it is ready for use
         */
        static void init();

        /** Sets the internal state (e.g. after a restart)
         * @param nextId     Next id to be returned
         * @param maxNumProc Maximum number of processes ever used (never decreases)
         */
        static void setState(const uint64_t nextId, const uint64_t maxNumProc);

        /** Returns the state (e.g. for saving)
         *  Tuple is the same as the parameters to @ref setState
         */
        static boost::tuple<uint64_t, uint64_t> getState();

        /** Functor that returns a new id each time it is called
         *  Modifies the state of the IdProvider */
        struct GetNewId
        {
            DINLINE uint64_cu operator()() const
            {
                return getNewId();
            }
        };

        /** Function that returns a new id each time it is called
         *  Modifies the state of the IdProvider  */
        HDINLINE static uint64_cu getNewId();

        /**
         * Return true, if an overflow of the counter is detected and hence there might be duplicate ids
         */
        static bool isOverflown();

    private:
        /** Returns the first id for the current rank */
        static uint64_t getStartId();

        /** Host version for getting a new id (changing the state) */
        static uint64_t getNewIdHost();

        static uint64_t maxNumProc_;
    };

}  // namespace PMacc
