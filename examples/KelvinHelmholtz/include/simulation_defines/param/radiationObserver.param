/**
 * Copyright 2013-2014 Heiko Burau, Rene Widera, Richard Pausch
 *
 * This file is part of PIConGPU. 
 * 
 * PIConGPU is free software: you can redistribute it and/or modify 
 * it under the terms of the GNU General Public License as published by 
 * the Free Software Foundation, either version 3 of the License, or 
 * (at your option) any later version. 
 * 
 * PIConGPU is distributed in the hope that it will be useful, 
 * but WITHOUT ANY WARRANTY; without even the implied warranty of 
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the 
 * GNU General Public License for more details. 
 * 
 * You should have received a copy of the GNU General Public License 
 * along with PIConGPU.  
 * If not, see <http://www.gnu.org/licenses/>. 
 */ 
 

#pragma once

namespace picongpu
{
  namespace radiation_observer
  {
    /** Compute observation angles 
     *
     * This function is used in the Radiation plug-in kernel to compute 
     * the observation directions given as a unit vector pointing
     * towards a 'virtual' detector
     *
     * @param    observation_id_extern
     *           int index that identifies each block on the GPU
     *           to compute the observation direction
     *
     * @return   unit vector pointing in observation direction
     *           type: vec2
     * 
     */
    DINLINE vec2 observation_direction(const int observation_id_extern)
    {
      /** compute observation directions for 2D virtual detector field 
       *  pointing toward the +x direction
       *  with observation angles ranging from
       *  theta = [angle_theta_start : angle_theta_end]
       *  phi   = [angle_phi_start   : angle_phi_end  ]
       *  every block index moves the phi angle from its start value toward 
       *  its end value until the observation_id_extern reaches N_split.
       *  After that the theta angle moves further from its start
       *  value towards its end value while phi is reset to its start
       *  value.
       *
       *  The unit vector pointing towards the observing virtual detector
       *  can be described using theta and phi by:
       *  x_value = sin(theta) * cos(phi)
       *  y_value = sin(theta) * sin(phi)
       *  z_value = cos(theta)
       *  These are the standard spherical coordinates.
       *
       *  The default setup describes an detector array of 
       *  16x16 detectors ranging from -pi/8= -22.5 degrees 
       *  to +pi/8= +22.5 degrees for both angles with the center
       *  pointing toward the x-axis (laser propagation direction).
       */
        
      /* generate two indices from single block index */
      const int N_angle_split = 16; /* index split distance */
      /* get column index for computing angle theta: */
      const int my_index_theta = observation_id_extern / N_angle_split;
      /* get row index for computing angle phi: */
      const int my_index_phi = observation_id_extern % N_angle_split;

      /*  range for BOTH angles */
      const numtype2 angle_range= picongpu::PI/2.0;

      /* angle stepwidth for BOTH angles */
      const numtype2 delta_angle =  1.0 * angle_range / (N_angle_split-1);

      /* compute both angles */
      const numtype2 theta(  my_index_theta * delta_angle  + 0.5*picongpu::PI ); 
      const numtype2 phi(    my_index_phi   * delta_angle  ); 
      
      /* compute unit vector */
      return vec2( sinf(theta)*cosf(phi) , sinf(theta)*sinf(phi) , cosf(theta) ) ;

    }
    
  } // end namespace radiation_observer
} // end namespace picongpu
