/**
 * Copyright 2013-2016 Axel Huebl, Heiko Burau, Rene Widera, Felix Schmitt
 *                     Richard Pausch
 *
 * This file is part of PIConGPU.
 *
 * PIConGPU is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * PIConGPU is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with PIConGPU.
 * If not, see <http://www.gnu.org/licenses/>.
 */


#pragma once

#include "particles/gasProfiles/profiles.def"
/* preprocessor struct generator */
#include "preprocessor/struct.hpp"

namespace picongpu
{
namespace SI
{
    /** The maximum density in particles per m^3 in the gas distribution
     *  unit: ELEMENTS/m^3
     *
     *  One particle per cell with weighting 1.0:
     */
    constexpr float_64 GAS_DENSITY_SI =
        1.0 /
        ( CELL_WIDTH_SI * CELL_HEIGHT_SI * CELL_DEPTH_SI );

}

//##########################################################################
//############## special gas profiles ######################################
//##########################################################################

namespace gasProfiles
{

    struct FreeFormulaFunctor
    {

        /**
         * This formula uses SI quantities only
         * The profile will be multiplied by GAS_DENSITY.
         *
         * @param position_SI total offset including all slides [in meter]
         * @param cellSize_SI cell sizes [in meter]
         *
         * @return float_X density [normalized to 1.0]
         */
        HDINLINE float_X operator()(
            const floatD_64& position_SI,
            const float3_64& cellSize_SI
        )
        {
            const PMacc::math::UInt64< simDim > cell_id( position_SI / cellSize_SI.shrink< simDim >() );

            // add particle in cell in first y plane at [128, 0, 128 ]
            const PMacc::math::UInt64< DIM3 > cell_start( 128u, 0u, 128u );

            bool isStartCell = true;
            for( uint64_t d = 0; d < simDim; ++d )
                if( cell_id[d] != cell_start[d] )
                    isStartCell = false;

            if( isStartCell )
                return 1.0;

            return 0.0;
        }
    };

    /* definition of gas free formula */
    using FreeFormula = FreeFormulaImpl< FreeFormulaFunctor >;

} // namespace gasProfiles

}
