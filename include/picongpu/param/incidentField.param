/* Copyright 2020-2022 Sergei Bastrakov
 *
 * This file is part of PIConGPU.
 *
 * PIConGPU is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * PIConGPU is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with PIConGPU.
 * If not, see <http://www.gnu.org/licenses/>.
 */

/** @file incidentField.param
 *
 * Configure incident field profile and gap between Huygence surface and absorber for each boundary.
 *
 * Available profiles:
 *  - profiles::None        : no incident field
 *  - profiles::Free<>      : custom profile with user-provided functors to calculate incident E and B
 *  - profiles::PlaneWave<> : plane wave profile with given parameters
 *
 * In the end, this file needs to define `XMin`, `XMax`, `YMax`, `YMax`, `ZMin`, `ZMax` (the latter two can be skipped
 * in 2d) type aliases in namespace `picongpu::fields::incidentField`. It also has to define constexpr array
 * `OFFSET` that controls inward offset of the generating surface relative to global domain. For example:
 *
 * @code{.cpp}
 * using XMin = profiles::Free< UserFunctorIncidentE >;
 * using XMax = profiles::None;
 * using YMin = profiles::PlaneWave< UserPlaneWaveParams >;
 * using YMax = profiles::Free< AnotherUserFunctorIncidentE, AnotherUserFunctorIncidentB >;
 * using ZMin = profiles::None;
 * using ZMax = profiles::None;
 *
 * constexpr uint32_t OFFSET[3][2] = { {16, 16}, {16, 16}, {16, 16} };
 * @endcode
 */

#pragma once

#include "picongpu/fields/incidentField/profiles/profiles.def"


namespace picongpu
{
    namespace fields
    {
        namespace incidentField
        {
            /** User-defined functor to set values of incident E field
             */
            class UserFunctorIncidentE
            {
            public:
                /* We use this to calculate your SI input back to our unit system */
                PMACC_ALIGN(m_unitField, const float3_64);

                /** Create a functor
                 *
                 * @param unitField conversion factor from SI to internal units,
                 *                  field_internal = field_SI / unitField
                 */
                HDINLINE UserFunctorIncidentE(const float3_64 unitField) : m_unitField(unitField)
                {
                }

                /** Calculate incident field E_inc(r, t) for a source
                 *
                 * @param totalCellIdx cell index in the total domain (including all moving window slides),
                 *        note that it is fractional
                 * @param currentStep current time step index, note that it is fractional
                 * @return incident field value in internal units
                 */
                HDINLINE float3_X operator()(const floatD_X& totalCellIdx, const float_X currentStep) const
                {
                    auto const fieldSI = float3_X(0.0_X, 0.0_X, 0.0_X);
                    return fieldSI / precisionCast<float_X>(m_unitField);
                }
            };

            /** User-defined functor to set values of incident B field
             */
            class UserFunctorIncidentB
            {
            public:
                /* We use this to calculate your SI input back to our unit system */
                PMACC_ALIGN(m_unitField, const float3_64);

                /** Create a functor
                 *
                 * @param unitField conversion factor from SI to internal units,
                 *                  field_internal = field_SI / unitField
                 */
                HDINLINE UserFunctorIncidentB(const float3_64 unitField) : m_unitField(unitField)
                {
                }

                /** Calculate incident field B_inc(r, t) for a source
                 *
                 * @param totalCellIdx cell index in the total domain (including all moving window slides),
                 *        note that it is fractional
                 * @param currentStep current time step index, note that it is fractional
                 * @return incident field value in internal units
                 */
                HDINLINE float3_X operator()(const floatD_X& totalCellIdx, const float_X currentStep) const
                {
                    auto const fieldSI = float3_X(0.0_X, 0.0_X, 0.0_X);
                    return fieldSI / precisionCast<float_X>(m_unitField);
                }
            };

            /** Make a profile with the user-provided functors defined above.
             *
             * The functors for incident field E and B must be consistent to each other.
             * They also have to take into consideration which boundary the profile is applied to.
             * The second template parameter may be left with the default value, then B field will be calculated
             * from E using the slowly varying envelope approximation (SVEA).
             */
            using MyProfile = profiles::Free<UserFunctorIncidentE, UserFunctorIncidentB>;

            /**@{*/
            //! Incident field profile types along each boundary, these 6 types (or aliases) are required.
            using XMin = profiles::None;
            using XMax = profiles::None;
            using YMin = profiles::None;
            using YMax = profiles::None;
            using ZMin = profiles::None;
            using ZMax = profiles::None;
            /**@}*/

            /** Inward offset of the Huygens surface from global domain boundaries
             *
             * The offset is in cells, counted from the corrresponding boundary inwards in the normal direction.
             * This array is logically similar to specifying absorber thickness.
             * The offset for the boundary must be at least absorber_thickness + (FDTD_spatial_order / 2 - 1).
             * However beware of setting offset = absorber_thickness + const, as then changing absorber parameters
             * may also affect laser positioning.
             * When all used profiles are None, the check for OFFSET validity is skipped.
             */
            constexpr uint32_t OFFSET[3][2] = {
                {16, 16}, // x direction [negative, positive]
                {16, 16}, // y direction [negative, positive]
                {16, 16} // z direction [negative, positive]
            };

        } // namespace incidentField
    } // namespace fields
} // namespace picongpu
