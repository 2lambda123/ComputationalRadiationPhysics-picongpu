/* Copyright 2013-2021 Axel Huebl, Heiko Burau, Anton Helm, Rene Widera,
 *                     Richard Pausch, Alexander Debus, Nils Prinz,
 *                     Klaus Steiniger

 *
 * This file is part of PIConGPU.
 *
 * PIConGPU is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * PIConGPU is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with PIConGPU.
 * If not, see <http://www.gnu.org/licenses/>.
 */

#pragma once

#include <pmacc/types.hpp>


namespace picongpu
{
    namespace fields
    {
        namespace laserProfiles
        {
            namespace pulseFromSpectrum
            {
                namespace defaults
                {
                    struct PulseFromSpectrumParam
                    {
                        /** central wavelength of the gaussian spectrum
                         *
                         *  unit: meter */
                        static constexpr float_X WAVE_LENGTH_SI = 800.0e-9;

                        /** Convert the normalized laser strength parameter a0 to Volt per meter */
                        static constexpr float_64 UNITCONV_A0_to_Amplitude_SI = -2.0 * PI / WAVE_LENGTH_SI
                            * ::picongpu::SI::ELECTRON_MASS_SI * ::picongpu::SI::SPEED_OF_LIGHT_SI
                            * ::picongpu::SI::SPEED_OF_LIGHT_SI / ::picongpu::SI::ELECTRON_CHARGE_SI;

                        /** unit: W / m^2 */
                        // calculate: _A0 = 8.549297e-6 * sqrt( Intensity[W/m^2] ) * wavelength[m] (linearly polarized)

                        /** normalized laser strength parameter
                         *
                         * unit: none */
                        static constexpr float_64 _A0 = 1.5;

                        /** amplitude of the laser's electric field main polarization component
                         *
                         * unit: Volt / meter */
                        static constexpr float_64 AMPLITUDE_SI = _A0 * UNITCONV_A0_to_Amplitude_SI;

                        /** unit: Volt / meter */
                        // static constexpr float_64 AMPLITUDE_SI = 1.738e13;

                        /** Pulse duration: sigma of std. gauss for intensity (E^2)
                         *  PULSE_DURATION_SI = FWHM_of_Intensity   / [ 2*sqrt{ 2* ln(2) } ]
                         *                                          [    2.354820045     ]
                         *  Info:             FWHM_of_Intensity = FWHM_Illumination
                         *                      = what an experimentalist calls "pulse duration"
                         *  unit: seconds (1 sigma) */
                        static constexpr float_64 PULSE_DURATION_SI = 15.0e-15;

                        /** beam waist: distance from the axis where the pulse intensity (E^2)
                         *              decreases to its 1/e^2-th part,
                         *              at the focus position of the laser
                         * W0_SI = FWHM_of_Intensity / sqrt{ 2* ln(2) }
                         *                             [   1.17741    ]
                         *
                         *  unit: meter */
                        // -> 32 cells
                        static constexpr float_64 W0_SI = 3.0e-6;

                        /** the distance to the laser focus along the
                         *  laser's propagation direction direction
                         *
                         *  unit: meter */
                        static constexpr float_64 FOCUS_POS_SI = 0.0e-6;

                        /** group delay dispersion at initialisation position
                         *
                         *  unit: seconds^-2 */
                        static constexpr float_64 GDD_SI = 0.0 * 1.0e-15 * 1.0e-15;

                        /** third order dispersion at initialisation position
                         *
                         *  unit: seconds^-3 */
                        static constexpr float_64 TOD_SI = 0.0 * 1.0e-15 * 1.0e-15 * 1.0e-15;

                        /** Duration over which the laser pulse will be initialized is
                         * PULSE_INIT times the PULSE_DURATION.
                         * The actual duration of a laser pulse depends on the shape of the spectrum
                         * including dispersions. PULSE_INIT has to be high enough to feed the complete
                         * laser field into the simulation.
                         * As there is no analytical expression to calculate the actual duration with
                         * given GDD and TOD, one has to check if the laser pulse is represented correctly.
                         *
                         * The provided value is a minimum value for a gaussian laser without dispersion.
                         * Adjust according to your setup!
                         *
                         *  unit: none */
                        static constexpr float_64 PULSE_INIT = 20.0;

                        /** Distance along y of laser initialization plane from boundary
                         * at y=0 in cells.
                         * Note, laser propagates along y (=moving window direction)
                         *
                         * if `initPlaneY == 0` than the absorber are disabled.
                         * if `initPlaneY > absorbercells negative Y` the negative absorber in y
                         * direction is enabled
                         *
                         * valid ranges:
                         *   - initPlaneY == 0
                         *   - absorber cells negative Y < initPlaneY < cells in y direction of the top gpu
                         */
                        static constexpr uint32_t initPlaneY = 0;

                        /** Available polarisation types
                         */
                        enum PolarisationType
                        {
                            LINEAR_X = 1u,
                            LINEAR_Z = 2u,
                        };
                        /** Polarization selection
                         */
                        static constexpr PolarisationType Polarisation = LINEAR_X;
                    };
                } // namespace defaults
            } // namespace pulseFromSpectrum

            /** PulseFromSpectrum laser profile with a transversal gaussian profile and longitudinal shape derived from
             * spectrum
             *
             * @tparam T_Params class parameter to configure the PulseFromSpectrum profile,
             *                  see members of pulseFromSpectrum::default::PulseFromSpectrumParam
             *                  for required members
             */
            template<typename T_Params = pulseFromSpectrum::defaults::PulseFromSpectrumParam>
            struct PulseFromSpectrum;

        } // namespace laserProfiles
    } // namespace fields
} // namespace picongpu
