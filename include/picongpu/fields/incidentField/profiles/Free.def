/* Copyright 2020-2022 Sergei Bastrakov
 *
 * This file is part of PIConGPU.
 *
 * PIConGPU is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * PIConGPU is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with PIConGPU.
 * If not, see <http://www.gnu.org/licenses/>.
 */

#pragma once

#include <cstdint>


namespace picongpu
{
    namespace fields
    {
        namespace incidentField
        {
            namespace profiles
            {
                /** Free profile using given functors
                 *
                 * By default translates to source with same functors for any axis and direction.
                 * Thus, a user should either hard-set the functors the required axis and directions or
                 * provide the mapping by specializing traits GetFunctorIncidentE<> and GetFunctorIncidentB<>.
                 *
                 * @tparam T_FunctorIncidentE functor for the incident E field, follows the interface of
                 *                            FunctorIncidentFieldConcept (defined in Functors.hpp)
                 * @tparam T_FunctorIncidentB functor for the incident B field, follows the interface of
                 *                            FunctorIncidentFieldConcept (defined in Functors.hpp)
                 */
                template<typename T_FunctorIncidentE, typename T_FunctorIncidentB>
                struct Free;

            } // namespace profiles

            /** Get type of incident field functor for the given profile type, axis and direction
             *
             * The resulting functor is set as ::type.
             * By default forwards internal type FunctorIncidentE/FunctorIncidentB.
             *
             * These traits have to be specialized by a user for profiles::Free<> and particular template arguments
             * when the same profile is used for multiple boundaries.
             * Otherwise and for other incident field profiles no specialization is needed.
             *
             * @tparam T_Profile profile type
             * @tparam T_axis boundary axis, 0 = x, 1 = y, 2 = z
             * @tparam T_direction direction, 1 = positive (from the min boundary inwards), -1 = negative (from the max
             * boundary inwards)
             *
             * @{
             */

            /** Get functor for incident E values */
            template<typename T_Profile, uint32_t T_axis, int32_t T_direction>
            struct GetFunctorIncidentE;

            /** Get functor for incident B values */
            template<typename T_Profile, uint32_t T_axis, int32_t T_direction>
            struct GetFunctorIncidentB;

            /** @} */

        } // namespace incidentField
    } // namespace fields
} // namespace picongpu
