/* Copyright 2013-2022 Axel Huebl, Heiko Burau, Rene Widera, Marco Garten,
 *                     Benjamin Worpitz, Sergei Bastrakov
 *
 * This file is part of PIConGPU.
 *
 * PIConGPU is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * PIConGPU is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with PIConGPU.
 * If not, see <http://www.gnu.org/licenses/>.
 */

#pragma once

#include "picongpu/simulation_defines.hpp"

#include <pmacc/dimensions/SuperCellDescription.hpp>
#include <pmacc/lockstep.hpp>
#include <pmacc/mappings/threads/ThreadCollective.hpp>
#include <pmacc/memory/boxes/CachedBox.hpp>

#include <cstdint>


namespace picongpu::fields::maxwellSolver
{
    /** Kernel adding current density to electric and magnetic field
     *
     * @tparam T_numWorkers number of workers
     */
    template<uint32_t T_numWorkers>
    struct KernelAddCurrentDensity
    {
        /** Add current density with the given interpolation functor and coefficient
         *
         * @tparam T_CurrentInterpolationFunctor current interpolation functor type
         * @tparam T_Mapping mapper functor type
         * @tparam T_Acc alpaka accelerator type
         *
         * @param acc alpaka accelerator
         * @param fieldE electric field box
         * @param fieldB magnetic field box
         * @param fieldJ current density box
         * @param currentInterpolationFunctor current interpolation functor
         * @param coeff coefficient to be used in the current interpolation functor
         * @param mapper functor to map a block to a supercell
         */
        template<typename T_CurrentInterpolationFunctor, typename T_Mapping, typename T_Acc>
        DINLINE void operator()(
            T_Acc const& acc,
            typename FieldE::DataBoxType fieldE,
            typename FieldB::DataBoxType fieldB,
            typename FieldJ::DataBoxType fieldJ,
            T_CurrentInterpolationFunctor currentInterpolationFunctor,
            float_X const coeff,
            T_Mapping mapper) const
        {
            /* Caching of fieldJ */
            using BlockArea = pmacc::SuperCellDescription<
                SuperCellSize,
                typename T_CurrentInterpolationFunctor::LowerMargin,
                typename T_CurrentInterpolationFunctor::UpperMargin>;

            constexpr uint32_t cellsPerSuperCell = pmacc::math::CT::volume<SuperCellSize>::type::value;
            constexpr uint32_t numWorkers = T_numWorkers;

            uint32_t const workerIdx = cupla::threadIdx(acc).x;

            auto cachedJ = CachedBox::create<0, typename FieldJ::DataBoxType::ValueType>(acc, BlockArea());

            pmacc::math::operation::Assign assign;
            DataSpace<simDim> const block(mapper.getSuperCellIndex(DataSpace<simDim>(cupla::blockIdx(acc))));
            DataSpace<simDim> const blockCell = block * MappingDesc::SuperCellSize::toRT();

            auto fieldJBlock = fieldJ.shift(blockCell);

            ThreadCollective<BlockArea, numWorkers> collective(workerIdx);

            collective(acc, assign, cachedJ, fieldJBlock);

            cupla::__syncthreads(acc);

            lockstep::makeForEach<cellsPerSuperCell, numWorkers>(workerIdx)(
                [&](uint32_t const linearIdx)
                {
                    /* cell index within the superCell */
                    DataSpace<simDim> const cellIdx
                        = DataSpaceOperations<simDim>::template map<SuperCellSize>(linearIdx);
                    DataSpace<simDim> const cell(blockCell + cellIdx);

                    currentInterpolationFunctor(fieldE.shift(cell), fieldB.shift(cell), cachedJ.shift(cellIdx), coeff);
                });
        }
    };

} // namespace picongpu::fields::maxwellSolver
