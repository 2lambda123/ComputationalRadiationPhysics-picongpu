/* Copyright 2021 Sergei Bastrakov
 *
 * This file is part of PIConGPU.
 *
 * PIConGPU is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * PIConGPU is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with PIConGPU.
 * If not, see <http://www.gnu.org/licenses/>.
 */

#pragma once

#include <cstdint>

namespace picongpu
{
    namespace fields
    {
        namespace maxwellSolver
        {
            /** A time-substepping version of the given field solver
             *
             * To propagate fields by DELTA_T, will do T_numSubSteps updates of the given solver
             * with dt = DELTA_T / T_numSubSteps.
             * Is suited for the case when plasma dynamics can be sufficiently resolved with a larger dt than laser.
             *
             * The substepping is hidden inside the usual field solver interface.
             * Thus, it is transparent for the rest of the simulation (except code called inside field solver). 
             * This solver is fully equivalent to T_BaseSolver when T_numSubSteps == 1.
             *
             * @tparam T_BaseSolver base field solver, follows requirements of field solvers
             * @tparam T_numSubSteps number of substeps per PIC time iteration
             */
            template<typename T_BaseSolver, uint32_t T_numSubSteps>
            class Substepping;

        } // namespace maxwellSolver
    } // namespace fields
} // namespace picongpu
